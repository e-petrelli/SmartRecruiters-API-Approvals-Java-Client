/*
 * Approvals API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.approvals;

import com.smartrecruiters.api.approvals.invoker.ApiCallback;
import com.smartrecruiters.api.approvals.invoker.ApiClient;
import com.smartrecruiters.api.approvals.invoker.ApiException;
import com.smartrecruiters.api.approvals.invoker.ApiResponse;
import com.smartrecruiters.api.approvals.invoker.Configuration;
import com.smartrecruiters.api.approvals.invoker.Pair;
import com.smartrecruiters.api.approvals.invoker.ProgressRequestBody;
import com.smartrecruiters.api.approvals.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.approvals.model.ApprovalRequest;
import com.smartrecruiters.api.approvals.model.ApprovalRequests;
import com.smartrecruiters.api.approvals.model.ErrorResponse;
import com.smartrecruiters.api.approvals.model.InlineObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApprovalsApi {
    private ApiClient localVarApiClient;

    public ApprovalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApprovalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for approvalsCreate
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Approval request created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create approval request with codes * **BASE_ID_NOT_FOUND** when base approval request id doesn&#39;t exist * **APPROVER_ID_NOT_FOUND** when at least one of approver ids doesn&#39;t exist * **INVALID_DECISION_MODE** when decisionMode is &#x60;all&#x60; and type is &#x60;sequential&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unable to create approval request with codes * **UNAUTHORIZED_ACCESS** when no permissions to create approval request  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalsCreateCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/approvals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvalsCreateValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = approvalsCreateCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Create approval request
     * The new approval request will be created based on pending approval request with provided id. The pending request will be abandoned. The newly created request will contain new id, type, decision mode and steps provided in the request body. 
     * @param inlineObject  (optional)
     * @return ApprovalRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Approval request created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create approval request with codes * **BASE_ID_NOT_FOUND** when base approval request id doesn&#39;t exist * **APPROVER_ID_NOT_FOUND** when at least one of approver ids doesn&#39;t exist * **INVALID_DECISION_MODE** when decisionMode is &#x60;all&#x60; and type is &#x60;sequential&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unable to create approval request with codes * **UNAUTHORIZED_ACCESS** when no permissions to create approval request  </td><td>  -  </td></tr>
     </table>
     */
    public ApprovalRequest approvalsCreate(InlineObject inlineObject) throws ApiException {
        ApiResponse<ApprovalRequest> localVarResp = approvalsCreateWithHttpInfo(inlineObject);
        return localVarResp.getData();
    }

    /**
     * Create approval request
     * The new approval request will be created based on pending approval request with provided id. The pending request will be abandoned. The newly created request will contain new id, type, decision mode and steps provided in the request body. 
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;ApprovalRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Approval request created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create approval request with codes * **BASE_ID_NOT_FOUND** when base approval request id doesn&#39;t exist * **APPROVER_ID_NOT_FOUND** when at least one of approver ids doesn&#39;t exist * **INVALID_DECISION_MODE** when decisionMode is &#x60;all&#x60; and type is &#x60;sequential&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unable to create approval request with codes * **UNAUTHORIZED_ACCESS** when no permissions to create approval request  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprovalRequest> approvalsCreateWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = approvalsCreateValidateBeforeCall(inlineObject, null);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create approval request (asynchronously)
     * The new approval request will be created based on pending approval request with provided id. The pending request will be abandoned. The newly created request will contain new id, type, decision mode and steps provided in the request body. 
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Approval request created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create approval request with codes * **BASE_ID_NOT_FOUND** when base approval request id doesn&#39;t exist * **APPROVER_ID_NOT_FOUND** when at least one of approver ids doesn&#39;t exist * **INVALID_DECISION_MODE** when decisionMode is &#x60;all&#x60; and type is &#x60;sequential&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unable to create approval request with codes * **UNAUTHORIZED_ACCESS** when no permissions to create approval request  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalsCreateAsync(InlineObject inlineObject, final ApiCallback<ApprovalRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvalsCreateValidateBeforeCall(inlineObject, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approvalsGet
     * @param pageId Identifier for the paged list of approval requests. To get the first page of approval request, leave it blank.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approval requests </td><td>  * Link - Links to related resources, in the format defined by [RFC 8288](https://tools.ietf.org/html/rfc8288). This will include a link with relation type &#x60;next&#x60; to the next page, if there is a next page.  <br>  </td></tr>
        <tr><td> 400 </td><td> Unable to retrieve approval requests with codes * **INVALID_PAGE_ID** when pageId is incorrect  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalsGetCall(String pageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/approvals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageId", pageId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvalsGetValidateBeforeCall(String pageId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = approvalsGetCall(pageId, _callback);
        return localVarCall;

    }

    /**
     * Get pending approvals requests where you are an approver.
     * The max number of returned approval requests is 100.
     * @param pageId Identifier for the paged list of approval requests. To get the first page of approval request, leave it blank.  (optional)
     * @return ApprovalRequests
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approval requests </td><td>  * Link - Links to related resources, in the format defined by [RFC 8288](https://tools.ietf.org/html/rfc8288). This will include a link with relation type &#x60;next&#x60; to the next page, if there is a next page.  <br>  </td></tr>
        <tr><td> 400 </td><td> Unable to retrieve approval requests with codes * **INVALID_PAGE_ID** when pageId is incorrect  </td><td>  -  </td></tr>
     </table>
     */
    public ApprovalRequests approvalsGet(String pageId) throws ApiException {
        ApiResponse<ApprovalRequests> localVarResp = approvalsGetWithHttpInfo(pageId);
        return localVarResp.getData();
    }

    /**
     * Get pending approvals requests where you are an approver.
     * The max number of returned approval requests is 100.
     * @param pageId Identifier for the paged list of approval requests. To get the first page of approval request, leave it blank.  (optional)
     * @return ApiResponse&lt;ApprovalRequests&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approval requests </td><td>  * Link - Links to related resources, in the format defined by [RFC 8288](https://tools.ietf.org/html/rfc8288). This will include a link with relation type &#x60;next&#x60; to the next page, if there is a next page.  <br>  </td></tr>
        <tr><td> 400 </td><td> Unable to retrieve approval requests with codes * **INVALID_PAGE_ID** when pageId is incorrect  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprovalRequests> approvalsGetWithHttpInfo(String pageId) throws ApiException {
        okhttp3.Call localVarCall = approvalsGetValidateBeforeCall(pageId, null);
        Type localVarReturnType = new TypeToken<ApprovalRequests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pending approvals requests where you are an approver. (asynchronously)
     * The max number of returned approval requests is 100.
     * @param pageId Identifier for the paged list of approval requests. To get the first page of approval request, leave it blank.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approval requests </td><td>  * Link - Links to related resources, in the format defined by [RFC 8288](https://tools.ietf.org/html/rfc8288). This will include a link with relation type &#x60;next&#x60; to the next page, if there is a next page.  <br>  </td></tr>
        <tr><td> 400 </td><td> Unable to retrieve approval requests with codes * **INVALID_PAGE_ID** when pageId is incorrect  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approvalsGetAsync(String pageId, final ApiCallback<ApprovalRequests> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvalsGetValidateBeforeCall(pageId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
